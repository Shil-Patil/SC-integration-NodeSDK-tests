"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookManager = void 0;
var BaseManager_1 = require("./BaseManager");
var LogMessageFormatter_1 = require("../Helpers/LogMessageFormatter");
var WebhooksFactory_1 = require("../Factory/Webhook/WebhooksFactory");
var EventsFactory_1 = require("../Factory/Webhook/EventsFactory");
var WebhookTransformer_1 = require("../Transformer/Webhook/WebhookTransformer");
var UrlUtils_1 = require("../Helpers/UrlUtils");
var InvalidUrlException_1 = require("../Exception/InvalidUrlException");
var EmptyArgumentException_1 = require("../Exception/EmptyArgumentException");
var WebhookManager = /** @class */ (function (_super) {
    __extends(WebhookManager, _super);
    function WebhookManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebhookManager.prototype.createWebhook = function (callbackUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, events, xml, result, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        action = 'CreateWebhook';
                        if (!(0, UrlUtils_1.isUrl)(callbackUrl))
                            throw new InvalidUrlException_1.InvalidUrlException(callbackUrl);
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.getWebhookEntities()];
                    case 1:
                        events = _a.sent();
                        xml = WebhookTransformer_1.WebhookTransformer.createWebhookAsXmlString(callbackUrl, events);
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST", xml)];
                    case 2:
                        result = _a.sent();
                        response = result.body["Webhook"]["WebhookId"];
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "Webhooks were Created"));
                        return [2 /*return*/, response];
                    case 3:
                        e_1 = _a.sent();
                        throw Error(e_1.message);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    WebhookManager.prototype.deleteWebhook = function (webhookId) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, xml, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'DeleteWebhook';
                        if (!webhookId)
                            throw new EmptyArgumentException_1.EmptyArgumentException('WebhookId');
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        xml = WebhookTransformer_1.WebhookTransformer.deleteWebhookAsXmlString(webhookId);
                        return [4 /*yield*/, this.executeAction(action, params, reqId, 'POST', xml)];
                    case 1:
                        _a.sent();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "Webhook is Deleted"));
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(e_2.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    WebhookManager.prototype.getWebhooks = function (webhookIds) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, webhooks, webhooksResponse, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = "GetWebhooks";
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        if (webhookIds) {
                            params.set({ 'WebhookIds': JSON.stringify(webhookIds) });
                        }
                        return [4 /*yield*/, this.executeAction(action, params, reqId)];
                    case 1:
                        result = _a.sent();
                        webhooks = WebhooksFactory_1.WebhooksFactory.make(result.body);
                        webhooksResponse = webhooks.all();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "Webhooks were recovered"));
                        return [2 /*return*/, webhooksResponse];
                    case 2:
                        e_3 = _a.sent();
                        throw Error(e_3.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    WebhookManager.prototype.getAllWebhooks = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getWebhooks()];
            });
        });
    };
    WebhookManager.prototype.getWebhookByIds = function (webhookIds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!webhookIds)
                    throw new EmptyArgumentException_1.EmptyArgumentException('WebhookIds');
                return [2 /*return*/, this.getWebhooks(webhookIds)];
            });
        });
    };
    WebhookManager.prototype.getWebhookEntities = function () {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, events, eventsResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        action = 'GetWebhookEntities';
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId)];
                    case 1:
                        result = _a.sent();
                        events = EventsFactory_1.EventsFactory.make(result.body);
                        eventsResponse = events.all();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "events were recovered "));
                        return [2 /*return*/, eventsResponse];
                }
            });
        });
    };
    return WebhookManager;
}(BaseManager_1.BaseManager));
exports.WebhookManager = WebhookManager;
//# sourceMappingURL=WebhookManager.js.map