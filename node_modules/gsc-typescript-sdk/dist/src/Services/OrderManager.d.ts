import { Parameters } from "../Application/Parameters";
import { OrderItem } from "../Model/Order/OrderItem";
import { OrderItems } from "../Model/Order/OrderItems";
import { Orders } from "../Model/Order/Orders";
import { sortDirections } from "../Contract/OrderSortDirections";
import { sortBy } from "../Contract/OrderSortFilters";
import { status } from "../Contract/OrderStatus";
import { Order } from "../Model/Order/Order";
import { BaseManager } from "./BaseManager";
import { TrackingCode } from "../Model/Order/TrackingCode";
declare class OrderManager extends BaseManager {
    static readonly DEFAULT_LIMIT = 1000;
    static readonly DEFAULT_OFFSET = 0;
    static readonly DEFAULT_SORT_BY: sortBy;
    static readonly DEFAULT_SORT_DIRECTION: sortDirections;
    getOrder(orderId: number): Promise<Order>;
    protected getOrders(parameters: Parameters): Promise<Order[]>;
    getOrdersFromParameters(createdAfter?: Date, createdBefore?: Date, updatedAfter?: Date, updatedBefore?: Date, status?: status, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersCreatedBetween(createdAfter: Date, createdBefore: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersUpdatedBetween(updatedAfter: Date, updatedBefore: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersCreatedAfter(createdAfter: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersCreatedBefore(createdBefore: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersUpdatedAfter(updatedAfter: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersUpdatedBefore(updatedBefore: Date, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrdersWithStatus(status: status, limit?: number, offset?: number, sortBy?: sortBy, sortDirection?: sortDirections): Promise<Order[]>;
    getOrderItems(orderId: number): Promise<OrderItems>;
    getMultipleOrderItems(orderIdList: Array<number | string>): Promise<Orders>;
    setStatusToPackedByMarketplace(orderItemIds: Array<string | number>, deliveryType: string, shippingProvider?: string, trackingNumber?: string): Promise<OrderItem[]>;
    setStatusToReadyToShip(orderItemIds: Array<string | number>, deliveryType: string, packageId?: string, shippingProvider?: string, trackingNumber?: string): Promise<OrderItem[]>;
    setStatusToCanceled(orderItemId: number, reason: string, reasonDetail?: string): Promise<void>;
    getTrackingCode(packageId: string, shippingProvider: string): Promise<TrackingCode>;
    protected setListDimensions(parameters: Parameters, limit: number, offset: number): void;
    protected setSortParametersList(parameters: Parameters, sortBy: sortBy, sortDirection: sortDirections): void;
    setInvoiceNumber(orderItemId: number, invoiceNumber: string, invoiceDocumentLink: string): Promise<JSON>;
}
export { OrderManager };
