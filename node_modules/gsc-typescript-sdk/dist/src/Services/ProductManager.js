"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductManager = void 0;
var BaseManager_1 = require("./BaseManager");
var FeedResponseFactory_1 = require("../Factory/FeedResponseFactory");
var Products_1 = require("../Model/Product/Products");
var ProductsTransformer_1 = require("../Transformer/Product/ProductsTransformer");
var LogMessageFormatter_1 = require("../Helpers/LogMessageFormatter");
var Product_1 = require("../Model/Product/Product");
var Images_1 = require("../Model/Product/Images");
var ProductManager = /** @class */ (function (_super) {
    __extends(ProductManager, _super);
    function ProductManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProductManager.prototype.productCreate = function (products) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, xml, headers, result, feedResponse, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = "ProductCreate";
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        xml = ProductsTransformer_1.ProductsTransformer.asXmlString(products);
                        headers = { 'Content-Type': 'text/xml; charset=UTF8' };
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST", xml, headers)];
                    case 1:
                        result = _a.sent();
                        feedResponse = FeedResponseFactory_1.FeedResponseFactory.make(result.head);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The product was created in Linio"));
                        return [2 /*return*/, feedResponse];
                    case 2:
                        e_1 = _a.sent();
                        throw new Error(e_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ProductManager.prototype.productUpdate = function (products) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, xml, headers, result, feedResponse, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = "ProductUpdate";
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        xml = ProductsTransformer_1.ProductsTransformer.asXmlString(products);
                        headers = { 'Content-Type': 'text/xml; charset=UTF8' };
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST", xml, headers)];
                    case 1:
                        result = _a.sent();
                        feedResponse = FeedResponseFactory_1.FeedResponseFactory.make(result.head);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The product was updated in Linio"));
                        return [2 /*return*/, feedResponse];
                    case 2:
                        e_2 = _a.sent();
                        throw new Error(e_2.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ProductManager.prototype.addImage = function (productImages) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, products_1, xml, headers, result, feedResponse, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'Image';
                        params = this.makeParametersForAction(action);
                        reqId = this.generateRequestId();
                        products_1 = new Products_1.Products();
                        productImages.forEach(function (image) {
                            var product = Product_1.Product.fromSku(image.sku);
                            var imagesCollection = new Images_1.Images();
                            imagesCollection.addMany(image.images);
                            product.attachImages(imagesCollection);
                            products_1.add(product);
                        });
                        xml = ProductsTransformer_1.ProductsTransformer.imagesAsXmlString(products_1);
                        headers = { 'Content-Type': 'text/xml; charset=UTF8' };
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST", xml, headers)];
                    case 1:
                        result = _a.sent();
                        feedResponse = FeedResponseFactory_1.FeedResponseFactory.make(result.head);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The Images were added"));
                        return [2 /*return*/, feedResponse];
                    case 2:
                        e_3 = _a.sent();
                        throw new Error(e_3.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // This method will be implemented next
    ProductManager.prototype.getProducts = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, { parameters: parameters }];
                }
                catch (e) {
                    throw new Error(e.message);
                }
                return [2 /*return*/];
            });
        });
    };
    // This method will be implemented next
    ProductManager.prototype.productRemove = function (products) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, products];
            });
        });
    };
    // This method will be implemented next
    ProductManager.prototype.getAllProducts = function (limit, offset) {
        if (limit === void 0) { limit = ProductManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = ProductManager.DEFAULT_OFFSET; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { limit: limit, offset: offset }];
            });
        });
    };
    ProductManager.DEFAULT_LIMIT = 1000;
    ProductManager.DEFAULT_OFFSET = 0;
    ProductManager.DEFAULT_FILTER = 'all';
    return ProductManager;
}(BaseManager_1.BaseManager));
exports.ProductManager = ProductManager;
//# sourceMappingURL=ProductManager.js.map