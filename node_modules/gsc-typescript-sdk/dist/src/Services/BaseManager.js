"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseManager = void 0;
var randombytes_1 = __importDefault(require("randombytes"));
var Signature_1 = require("../Application/Signature");
var LogMessageFormatter_1 = require("../Helpers/LogMessageFormatter");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var HandleResponse_1 = require("../Response/HandleResponse");
var BaseManager = /** @class */ (function () {
    function BaseManager(_configuration, _httpClient, _parameters, _logger) {
        this._configuration = _configuration;
        this._httpClient = _httpClient;
        this._parameters = _parameters;
        this._logger = _logger;
    }
    BaseManager.prototype.makeParametersForAction = function (action) {
        var parameters = (0, cloneDeep_1.default)(this._parameters);
        parameters.set({ Action: action });
        return parameters;
    };
    BaseManager.prototype.generateRequestId = function () {
        return (0, randombytes_1.default)(16).toString('hex');
    };
    BaseManager.prototype.executeAction = function (action, parameters, requestId, httpMethod, body, headers) {
        if (httpMethod === void 0) { httpMethod = "GET"; }
        return __awaiter(this, void 0, void 0, function () {
            var response, builtResponse, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.logRequest(requestId, action, parameters, httpMethod, body);
                        return [4 /*yield*/, this._httpClient.send(this.buildQuery(parameters), httpMethod, body, headers)];
                    case 1:
                        response = _a.sent();
                        this.logRawResponse(requestId, action, response.data);
                        builtResponse = HandleResponse_1.HandleResponse.parse(response.data);
                        this.logHandledResponse(requestId, action, builtResponse);
                        return [2 /*return*/, builtResponse];
                    case 2:
                        e_1 = _a.sent();
                        this.logError(requestId, action, JSON.stringify(e_1));
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    BaseManager.prototype.buildQuery = function (parameters) {
        return __assign(__assign({}, parameters.all), { 'Signature': Signature_1.Signature.generate(parameters, this._configuration.apiKey).get });
    };
    BaseManager.prototype.logRequest = function (requestId, action, parameters, httpMethod, body) {
        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.fromAction(requestId, action, LogMessageFormatter_1.LogMessageFormatter.TYPE_REQUEST), {
            parameters: parameters.all,
            httpMethod: httpMethod,
            body: body ? body : null
        });
    };
    BaseManager.prototype.logRawResponse = function (requestId, action, body) {
        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.fromAction(requestId, action, LogMessageFormatter_1.LogMessageFormatter.TYPE_RESPONSE), {
            body: body
        });
    };
    BaseManager.prototype.logHandledResponse = function (requestId, action, response) {
        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.fromAction(requestId, action, LogMessageFormatter_1.LogMessageFormatter.TYPE_BUILT_RESPONSE), {
            head: response.head,
            body: JSON.stringify(response.body)
        });
    };
    BaseManager.prototype.logError = function (requestId, action, error) {
        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.fromAction(requestId, action, LogMessageFormatter_1.LogMessageFormatter.TYPE_ERROR), {
            error: error
        });
    };
    return BaseManager;
}());
exports.BaseManager = BaseManager;
//# sourceMappingURL=BaseManager.js.map