"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderManager = void 0;
var OrderItemsFactory_1 = require("../Factory/Order/OrderItemsFactory");
var OrdersItemsFactory_1 = require("../Factory/Order/OrdersItemsFactory");
var LogMessageFormatter_1 = require("../Helpers/LogMessageFormatter");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var OrdersFactory_1 = require("../Factory/Order/OrdersFactory");
var BaseManager_1 = require("./BaseManager");
var DateUtils_1 = require("../Helpers/DateUtils");
var TrackingCodeFactory_1 = require("../Factory/Order/TrackingCodeFactory");
var OrderManager = /** @class */ (function (_super) {
    __extends(OrderManager, _super);
    function OrderManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OrderManager.prototype.getOrder = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, ordersResponse, orderResponse, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'GetOrder';
                        params = this.makeParametersForAction(action);
                        params.set({ 'OrderId': orderId });
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "GET")];
                    case 1:
                        result = _a.sent();
                        ordersResponse = OrdersFactory_1.OrdersFactory.make(result.body);
                        orderResponse = ordersResponse.all()[0];
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "Order were recovered"));
                        return [2 /*return*/, orderResponse];
                    case 2:
                        e_1 = _a.sent();
                        throw Error(e_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.getOrders = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var action, reqId, result, orders, orderResponse, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'GetOrders';
                        parameters.set({ Action: action });
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, parameters, reqId, "GET")];
                    case 1:
                        result = _a.sent();
                        orders = OrdersFactory_1.OrdersFactory.make(result.body);
                        orderResponse = orders.all();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "orders were recovered"));
                        return [2 /*return*/, orderResponse];
                    case 2:
                        e_2 = _a.sent();
                        throw Error(e_2.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersFromParameters = function (createdAfter, createdBefore, updatedAfter, updatedBefore, status, limit, offset, sortBy, sortDirection) {
        if (createdAfter === void 0) { createdAfter = null; }
        if (createdBefore === void 0) { createdBefore = null; }
        if (updatedAfter === void 0) { updatedAfter = null; }
        if (updatedBefore === void 0) { updatedBefore = null; }
        if (status === void 0) { status = null; }
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        if (createdAfter)
                            parameters.set({ CreatedAfter: (0, DateUtils_1.getDate)(createdAfter) });
                        if (createdBefore)
                            parameters.set({ CreatedBefore: (0, DateUtils_1.getDate)(createdBefore) });
                        if (updatedAfter)
                            parameters.set({ UpdatedAfter: (0, DateUtils_1.getDate)(updatedAfter) });
                        if (updatedBefore)
                            parameters.set({ UpdatedBefore: (0, DateUtils_1.getDate)(updatedBefore) });
                        if (status)
                            parameters.set({ Status: status });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersCreatedBetween = function (createdAfter, createdBefore, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            CreatedAfter: (0, DateUtils_1.getDate)(createdAfter),
                            CreatedBefore: (0, DateUtils_1.getDate)(createdBefore)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersUpdatedBetween = function (updatedAfter, updatedBefore, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            UpdatedAfter: (0, DateUtils_1.getDate)(updatedAfter),
                            UpdatedBefore: (0, DateUtils_1.getDate)(updatedBefore)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersCreatedAfter = function (createdAfter, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            CreatedAfter: (0, DateUtils_1.getDate)(createdAfter)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersCreatedBefore = function (createdBefore, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            CreatedBefore: (0, DateUtils_1.getDate)(createdBefore)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersUpdatedAfter = function (updatedAfter, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            UpdatedAfter: (0, DateUtils_1.getDate)(updatedAfter)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersUpdatedBefore = function (updatedBefore, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            UpdatedBefore: (0, DateUtils_1.getDate)(updatedBefore)
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrdersWithStatus = function (status, limit, offset, sortBy, sortDirection) {
        if (limit === void 0) { limit = OrderManager.DEFAULT_LIMIT; }
        if (offset === void 0) { offset = OrderManager.DEFAULT_OFFSET; }
        if (sortBy === void 0) { sortBy = OrderManager.DEFAULT_SORT_BY; }
        if (sortDirection === void 0) { sortDirection = OrderManager.DEFAULT_SORT_DIRECTION; }
        return __awaiter(this, void 0, void 0, function () {
            var parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameters = (0, cloneDeep_1.default)(this._parameters);
                        this.setListDimensions(parameters, limit, offset);
                        this.setSortParametersList(parameters, sortBy, sortDirection);
                        parameters.set({
                            Status: status
                        });
                        return [4 /*yield*/, this.getOrders(parameters)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrderManager.prototype.getOrderItems = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, orderItems, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'GetOrderItems';
                        params = this.makeParametersForAction(action);
                        params.set({
                            OrderId: orderId
                        });
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId)];
                    case 1:
                        result = _a.sent();
                        orderItems = OrderItemsFactory_1.OrderItemsFactory.make(result.body);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "".concat(orderItems.all().length, " orders items was recovered")));
                        return [2 /*return*/, orderItems];
                    case 2:
                        e_3 = _a.sent();
                        throw new Error(e_3.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.getMultipleOrderItems = function (orderIdList) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, orders, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'GetMultipleOrderItems';
                        params = this.makeParametersForAction(action);
                        if (!orderIdList.length)
                            throw new Error("Argument is empty");
                        params.set({
                            OrderIdList: JSON.stringify(orderIdList)
                        });
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId)];
                    case 1:
                        result = _a.sent();
                        orders = OrdersItemsFactory_1.OrdersItemsFactory.make(result.body);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "".concat(orders.all().length, " orders items was recovered")));
                        return [2 /*return*/, orders];
                    case 2:
                        e_4 = _a.sent();
                        throw new Error(e_4.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.setStatusToPackedByMarketplace = function (orderItemIds, deliveryType, shippingProvider, trackingNumber) {
        if (shippingProvider === void 0) { shippingProvider = null; }
        if (trackingNumber === void 0) { trackingNumber = null; }
        return __awaiter(this, void 0, void 0, function () {
            var action, params, requestId, result, orderItems, orderItemsResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        action = 'SetStatusToPackedByMarketplace';
                        params = this.makeParametersForAction(action);
                        params.set({
                            'Action': action,
                            'OrderItemIds': JSON.stringify(orderItemIds),
                            'DeliveryType': deliveryType
                        });
                        if (shippingProvider) {
                            params.set({ 'ShippingProvider': shippingProvider });
                        }
                        if (trackingNumber) {
                            params.set({ 'TrackingNumber': trackingNumber });
                        }
                        requestId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, requestId)];
                    case 1:
                        result = _a.sent();
                        orderItems = OrderItemsFactory_1.OrderItemsFactory.makeFromStatus(result.body);
                        orderItemsResponse = orderItems.all();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(requestId, action, "The items status was changed."));
                        return [2 /*return*/, orderItemsResponse];
                }
            });
        });
    };
    OrderManager.prototype.setStatusToReadyToShip = function (orderItemIds, deliveryType, packageId, shippingProvider, trackingNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, orderItems, orderItemsResponse, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'SetStatusToReadyToShip';
                        params = this.makeParametersForAction(action);
                        params.set({
                            OrderItemIds: JSON.stringify(orderItemIds),
                            DeliveryType: deliveryType
                        });
                        if (shippingProvider) {
                            params.set({ ShippingProvider: shippingProvider });
                        }
                        if (trackingNumber) {
                            params.set({ TrackingNumber: trackingNumber });
                        }
                        if (packageId) {
                            params.set({ PackageId: packageId });
                        }
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST")];
                    case 1:
                        result = _a.sent();
                        orderItems = OrderItemsFactory_1.OrderItemsFactory.makeFromStatus(result.body);
                        orderItemsResponse = orderItems.all();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The items status was changed"));
                        return [2 /*return*/, orderItemsResponse];
                    case 2:
                        e_5 = _a.sent();
                        throw new Error(e_5.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.setStatusToCanceled = function (orderItemId, reason, reasonDetail) {
        if (reasonDetail === void 0) { reasonDetail = null; }
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        action = 'SetStatusToCanceled';
                        params = this.makeParametersForAction(action);
                        params.set({
                            OrderItemId: orderItemId,
                            Reason: reason
                        });
                        if (reasonDetail) {
                            params.set({ ReasonDetail: reasonDetail });
                        }
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST")];
                    case 1:
                        _a.sent();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The items status was changed"));
                        return [3 /*break*/, 3];
                    case 2:
                        e_6 = _a.sent();
                        throw new Error(e_6.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OrderManager.prototype.getTrackingCode = function (packageId, shippingProvider) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result, trackingCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        action = "GetTrackingCode";
                        params = this.makeParametersForAction(action);
                        params.set({
                            packageId: packageId,
                            shipping_provider_name: shippingProvider
                        });
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId)];
                    case 1:
                        result = _a.sent();
                        trackingCode = TrackingCodeFactory_1.TrackingCodeFactory.make(result.body['TrackingCode']);
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "The tracking details was fetched"));
                        return [2 /*return*/, trackingCode];
                }
            });
        });
    };
    OrderManager.prototype.setListDimensions = function (parameters, limit, offset) {
        var verifiedLimit = limit >= 1 ? limit : OrderManager.DEFAULT_LIMIT;
        var verifiedOffset = offset < 0 ? OrderManager.DEFAULT_LIMIT : offset;
        parameters.set({
            Limit: verifiedLimit,
            Offset: verifiedOffset,
        });
    };
    OrderManager.prototype.setSortParametersList = function (parameters, sortBy, sortDirection) {
        parameters.set({
            sortBy: sortBy,
            sortDirection: sortDirection,
        });
    };
    OrderManager.prototype.setInvoiceNumber = function (orderItemId, invoiceNumber, invoiceDocumentLink) {
        return __awaiter(this, void 0, void 0, function () {
            var action, params, reqId, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        action = "SetInvoiceNumber";
                        params = this.makeParametersForAction(action);
                        params.set({
                            OrderItemId: orderItemId,
                            InvoiceNumber: invoiceNumber,
                        });
                        if (invoiceDocumentLink) {
                            params.set({ InvoiceDocumentLink: invoiceDocumentLink });
                        }
                        reqId = this.generateRequestId();
                        return [4 /*yield*/, this.executeAction(action, params, reqId, "POST")];
                    case 1:
                        result = _a.sent();
                        this._logger.debug(LogMessageFormatter_1.LogMessageFormatter.successInfo(reqId, action, "Invoice number is set'"));
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    OrderManager.DEFAULT_LIMIT = 1000;
    OrderManager.DEFAULT_OFFSET = 0;
    OrderManager.DEFAULT_SORT_BY = 'created_at';
    OrderManager.DEFAULT_SORT_DIRECTION = 'ASC';
    return OrderManager;
}(BaseManager_1.BaseManager));
exports.OrderManager = OrderManager;
//# sourceMappingURL=OrderManager.js.map