"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderFactory = void 0;
var BusinessUnitOperatorCodes_1 = require("../../Contract/BusinessUnitOperatorCodes");
var InvalidDomainException_1 = require("../../Exception/InvalidDomainException");
var Order_1 = require("../../Model/Order/Order");
var JsonStructureValidator_1 = require("../../Validator/JsonStructureValidator");
var AddressFactory_1 = require("./AddressFactory");
var OrderFactory = /** @class */ (function () {
    function OrderFactory() {
    }
    OrderFactory.make = function (element) {
        var _a, _b;
        var REQUIRED_FIELDS = [
            'OrderId',
            'CustomerFirstName',
            'CustomerLastName',
            'OrderNumber',
            'PaymentMethod',
            'Remarks',
            'DeliveryInfo',
            'Price',
            'GiftOption',
            'GiftMessage',
            'VoucherCode',
            'CreatedAt',
            'UpdatedAt',
            'AddressUpdatedAt',
            'AddressBilling',
            'AddressShipping',
            'NationalRegistrationNumber',
            'PromisedShippingTime',
            'ItemsCount',
            'ExtraAttributes',
            'Statuses',
        ];
        JsonStructureValidator_1.JsonStructureValidator.validateStructure(element, "Order", REQUIRED_FIELDS);
        var giftOption = (_a = element["GiftOption"]) !== null && _a !== void 0 ? _a : 0;
        var createdAt = element["CreatedAt"] ? new Date(element["CreatedAt"]) : null;
        var updatedAt = element["UpdatedAt"] ? new Date(element["UpdatedAt"]) : null;
        var addressUpdatedAt = element["AddressUpdatedAt"] ? new Date(element["AddressUpdatedAt"]) : null;
        var addressBilling = AddressFactory_1.AddressFactory.make(element["AddressBilling"]);
        var addressShipping = AddressFactory_1.AddressFactory.make(element["AddressShipping"]);
        var promisedShippingTime = element["PromisedShippingTime"] ? new Date(element["PromisedShippingTime"]) : null;
        var statuses = [];
        if (element["Statuses"]) {
            if (!(Array.isArray(element["Statuses"]["Status"]))) {
                element["Statuses"]["Status"] = [element["Statuses"]["Status"]];
            }
            element["Statuses"]["Status"].forEach(function (status) {
                statuses.push(status);
            });
        }
        var operatorCode = (_b = element["OperatorCode"]) !== null && _b !== void 0 ? _b : null;
        if (operatorCode && !(Object.values(BusinessUnitOperatorCodes_1.OPERATOR_CODES).includes(operatorCode.toLowerCase())))
            throw new InvalidDomainException_1.InvalidDomainException("OperatorCode");
        var orderNumber = isNaN(element["OrderNumber"]) ? element["OrderNumber"] : Number(element["OrderNumber"]);
        return Order_1.Order.fromData(element["OrderId"], orderNumber, element["CustomerFirstName"], element["CustomerLastName"], element["PaymentMethod"], element["Remarks"], element["DeliveryInfo"], element["Price"], giftOption, element["GiftMessage"], element["VoucherCode"], createdAt, updatedAt, addressUpdatedAt, addressBilling, addressShipping, element["NationalRegistrationNumber"], element["ItemsCount"], promisedShippingTime, element["ExtraAttributes"], statuses, operatorCode);
    };
    return OrderFactory;
}());
exports.OrderFactory = OrderFactory;
//# sourceMappingURL=OrderFactory.js.map