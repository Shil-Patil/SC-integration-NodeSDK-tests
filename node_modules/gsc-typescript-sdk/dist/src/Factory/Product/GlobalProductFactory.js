"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalProductFactory = void 0;
var Brand_1 = require("../../Model/Brand/Brand");
var Category_1 = require("../../Model/Category/Category");
var GlobalProduct_1 = require("../../Model/Product/GlobalProduct");
var Image_1 = require("../../Model/Product/Image");
var JsonStructureValidator_1 = require("../../Validator/JsonStructureValidator");
var CategoriesFactory_1 = require("../Category/CategoriesFactory");
var BusinessUnitsFactory_1 = require("./BusinessUnitsFactory");
var ImagesFactory_1 = require("./ImagesFactory");
var ProductDataFactory_1 = require("./ProductDataFactory");
var GlobalProductFactory = /** @class */ (function () {
    function GlobalProductFactory() {
    }
    GlobalProductFactory.make = function (element) {
        JsonStructureValidator_1.JsonStructureValidator.validateStructure(element, GlobalProductFactory.XML_MODEL, GlobalProductFactory.REQUIRED_FIELDS);
        if (!element["BusinessUnits"]["BusinessUnit"]) {
            throw new Error("Invalid JSON Structure - Product contains no buiseness units");
        }
        var businessUnits = BusinessUnitsFactory_1.BusinessUnitsFactory.make(element["BusinessUnits"]);
        var brand = Brand_1.Brand.fromName(element["Brand"]);
        var primaryCategory = Category_1.Category.fromName(element["PrimaryCategory"]);
        var productData = ProductDataFactory_1.ProductDataFactory.make(element["ProductData"]);
        var images;
        if (element["Images"]) {
            images = ImagesFactory_1.ImagesFactory.make(element["Images"]);
        }
        var product = GlobalProduct_1.GlobalProduct.fromBasicData(element["SellerSku"], element["Name"], primaryCategory, element["Description"], brand, businessUnits, element["ProductId"], productData, element["TaxClass"], element["Variation"] || null, element["Images"] ? images : null, element["QCStatus"] || null);
        if (element["ShopSku"]) {
            product.setShopSku(element["ShopSku"]);
        }
        if (element["ProductSin"]) {
            product.setProductSin(element["ProductSin"]);
        }
        if (element["ParentSku"]) {
            product.setParentSku(element["ParentSku"]);
        }
        if (element["Categories"]) {
            var categories = CategoriesFactory_1.CategoriesFactory.makeFromJsonString(element["Categories"]);
            product.setCategories(categories);
        }
        if (element["MainImage"]) {
            var image = new Image_1.Image(element["MainImage"]);
            product.setMainImage(image);
        }
        if (element["Color"]) {
            product.setColor(element["Color"]);
        }
        if (element["ColorBasico"]) {
            product.setColorBasico(element["ColorBasico"]);
        }
        if (element["Size"]) {
            product.setSize(element["Size"]);
        }
        if (element["Talla"]) {
            product.setTalla(element["Talla"]);
        }
        return product;
    };
    GlobalProductFactory.XML_MODEL = 'GlobalProduct';
    GlobalProductFactory.REQUIRED_FIELDS = [
        'SellerSku',
        'Name',
        'PrimaryCategory',
        'Description',
        'Brand',
        'ProductId',
        'TaxClass',
        'ProductData',
    ];
    return GlobalProductFactory;
}());
exports.GlobalProductFactory = GlobalProductFactory;
//# sourceMappingURL=GlobalProductFactory.js.map