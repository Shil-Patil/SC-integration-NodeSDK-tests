"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTransformer = void 0;
var InvalidDomainException_1 = require("../../Exception/InvalidDomainException");
var JsonHelper_1 = require("../../Helpers/JsonHelper");
var Brand_1 = require("../../Model/Brand/Brand");
var Categories_1 = require("../../Model/Category/Categories");
var Category_1 = require("../../Model/Category/Category");
var GlobalProduct_1 = require("../../Model/Product/GlobalProduct");
var ProductTransformer = /** @class */ (function () {
    function ProductTransformer() {
    }
    ProductTransformer.asXml = function (product) {
        var productJson = {};
        ProductTransformer.addAttributes(productJson, product.all());
        if (product.getProductData()) {
            var productData_1 = product.getProductData().all();
            var keys = Object.keys(productData_1);
            if (keys.length) {
                productJson["ProductData"] = {};
                keys.forEach(function (key) {
                    var attributeValue = productData_1[key];
                    if (Array.isArray(attributeValue)) {
                        attributeValue = attributeValue.join(',');
                    }
                    productJson["ProductData"][key] = attributeValue;
                });
            }
        }
        if (product instanceof GlobalProduct_1.GlobalProduct) {
            if (product.getBusinessUnits()) {
                var businessUnits = product.getBusinessUnits().all();
                if (businessUnits.length) {
                    productJson["BusinessUnits"] = {
                        BusinessUnit: []
                    };
                    businessUnits.forEach(function (businessUnit) {
                        var businessUnitAttributes = businessUnit.getAllAttributes();
                        var attributesJson = {};
                        Object.keys(businessUnitAttributes).forEach(function (key) {
                            attributesJson[key] = businessUnitAttributes[key];
                        });
                        productJson["BusinessUnits"].BusinessUnit.push(attributesJson);
                    });
                }
            }
        }
        return (0, JsonHelper_1.clone)(productJson);
    };
    ProductTransformer.addAttributes = function (productJson, attributes) {
        var keys = Object.keys(attributes);
        keys.forEach(function (key) {
            var attributeValue = attributes[key];
            if (attributeValue == null)
                return;
            var adaptedValue = ProductTransformer.attributeAsString(attributeValue);
            if (adaptedValue == null)
                return;
            productJson[key] = adaptedValue;
        });
    };
    ProductTransformer.attributeAsString = function (attribute) {
        if (typeof attribute == 'object')
            return ProductTransformer.attributeObjectAsString(attribute);
        return attribute;
    };
    ProductTransformer.attributeObjectAsString = function (attribute) {
        var className = attribute.constructor.name;
        var categoryObj;
        var categoriesObj;
        var brandObj;
        var categories;
        switch (className) {
            case Category_1.Category.name:
                categoryObj = attribute;
                return categoryObj.getId();
            case Categories_1.Categories.name:
                categoriesObj = attribute;
                categories = categoriesObj.all();
                if (!categories) {
                    return null;
                }
                return ProductTransformer.getCategoriesAsString(categories);
            case Brand_1.Brand.name:
                brandObj = attribute;
                return brandObj.getName();
        }
        throw new InvalidDomainException_1.InvalidDomainException(className);
    };
    ProductTransformer.getCategoriesAsString = function (categories) {
        var categoryIds = [];
        categories.forEach(function (category) {
            categoryIds.push(category.getId());
        });
        return categoryIds.join(',');
    };
    ProductTransformer.imagesAsXml = function (product) {
        var productJson = {};
        productJson["SellerSku"] = product.getSellerSku();
        productJson["Images"] = [];
        product.getImages().all().forEach(function (image) {
            productJson["Images"].push({
                Image: image.getUrl()
            });
        });
        return (0, JsonHelper_1.clone)(productJson);
    };
    ProductTransformer.skuAsXml = function (product) {
        var skuJson = {};
        skuJson["SellerSku"] = product.getSellerSku();
        return (0, JsonHelper_1.clone)(skuJson);
    };
    return ProductTransformer;
}());
exports.ProductTransformer = ProductTransformer;
//# sourceMappingURL=ProductTransformer.js.map