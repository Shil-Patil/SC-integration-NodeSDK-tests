"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalProduct = void 0;
var Categories_1 = require("../Category/Categories");
var ProductAttribute_1 = require("../../Contract/ProductAttribute");
var BaseProduct_1 = require("./BaseProduct");
var Images_1 = require("./Images");
var ProductData_1 = require("./ProductData");
var GlobalProduct = /** @class */ (function (_super) {
    __extends(GlobalProduct, _super);
    function GlobalProduct() {
        var _this = _super.call(this) || this;
        _this.productData = new ProductData_1.ProductData();
        _this.images = new Images_1.Images();
        return _this;
    }
    GlobalProduct.fromBasicData = function (sellerSku, name, primaryCategory, description, brand, businessUnits, productId, productData, taxClass, variation, images, qcStatus) {
        GlobalProduct.validateArguments(sellerSku, name, description, productId);
        var product = new GlobalProduct();
        product.setSellerSku(sellerSku);
        product.setName(name);
        product.setVariation(variation);
        product.setPrimaryCategory(primaryCategory);
        product.setDescription(description);
        product.setBrand(brand);
        product.setBusinessUnits(businessUnits);
        product.setProductId(productId);
        product.setTaxClass(taxClass);
        product.setProductData(productData);
        var categories = new Categories_1.Categories();
        product.setCategories(categories);
        if (images) {
            product.attachImages(images);
        }
        if (variation) {
            product.setVariation(variation);
        }
        if (qcStatus) {
            product.setQcStatus(qcStatus);
        }
        return product;
    };
    GlobalProduct.prototype.getBusinessUnits = function () {
        return this.businessUnits;
    };
    GlobalProduct.prototype.getQcStatus = function () {
        return this.qcStatus;
    };
    GlobalProduct.prototype.getColor = function () {
        return this.color;
    };
    GlobalProduct.prototype.getColorBasico = function () {
        return this.colorBasico;
    };
    GlobalProduct.prototype.getSize = function () {
        return this.size;
    };
    GlobalProduct.prototype.getTalla = function () {
        return this.talla;
    };
    GlobalProduct.prototype.setQcStatus = function (qcStatus) {
        this.qcStatus = qcStatus;
    };
    GlobalProduct.prototype.setBusinessUnits = function (businessUnits) {
        this.businessUnits = businessUnits;
    };
    GlobalProduct.prototype.setColor = function (color) {
        this.color = color;
    };
    GlobalProduct.prototype.setColorBasico = function (colorBasico) {
        this.colorBasico = colorBasico;
    };
    GlobalProduct.prototype.setSize = function (size) {
        this.size = size;
    };
    GlobalProduct.prototype.setTalla = function (talla) {
        this.talla = talla;
    };
    GlobalProduct.prototype.all = function () {
        var json = {};
        json[ProductAttribute_1.Attribute.FEED_SELLER_SKU] = this.sellerSku;
        json[ProductAttribute_1.Attribute.FEED_NEW_SELLER_SKU] = this.newSellerSku;
        json[ProductAttribute_1.Attribute.FEED_NAME] = this.name;
        json[ProductAttribute_1.Attribute.FEED_PRIMARY_CATEGORY] = this.primaryCategory;
        json[ProductAttribute_1.Attribute.FEED_CATEGORIES] = this.categories;
        json[ProductAttribute_1.Attribute.FEED_DESCRIPTION] = this.description;
        json[ProductAttribute_1.Attribute.FEED_BRAND] = this.brand;
        json[ProductAttribute_1.Attribute.FEED_PRODUCT_ID] = this.productId;
        json[ProductAttribute_1.Attribute.FEED_TAX_CLASS] = this.taxClass;
        json[ProductAttribute_1.Attribute.FEED_PARENT_SKU] = this.parentSku;
        json[ProductAttribute_1.Attribute.FEED_VARIATION] = this.variation;
        json[ProductAttribute_1.Attribute.FEED_COLOR] = this.color;
        json[ProductAttribute_1.Attribute.FEED_BASIC_COLOR] = this.colorBasico;
        json[ProductAttribute_1.Attribute.FEED_SIZE] = this.size;
        json[ProductAttribute_1.Attribute.FEED_TALLA] = this.talla;
        return json;
    };
    return GlobalProduct;
}(BaseProduct_1.BaseProduct));
exports.GlobalProduct = GlobalProduct;
//# sourceMappingURL=GlobalProduct.js.map