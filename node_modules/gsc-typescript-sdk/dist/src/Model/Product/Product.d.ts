import { ProductAttributes } from "../../Helpers/ProductAttributes";
import { Brand } from "../Brand/Brand";
import { Category } from "../Category/Category";
import { BaseProduct } from "./BaseProduct";
import { ProductInterface } from "./Contract/ProductInterface";
import { VariationProductInterface } from "./Contract/VariationProductInterface";
import { Images } from "./Images";
import { ProductData } from "./ProductData";
declare class Product extends BaseProduct implements ProductInterface, VariationProductInterface {
    protected status: string;
    protected price: number | null;
    protected salePrice: number | null;
    protected saleStartDate: Date | null;
    protected saleEndDate: Date | null;
    protected quantity: number;
    protected available: number | null;
    constructor();
    static fromBasicData(sellerSku: string, name: string, variation: string, primaryCategory: Category, description: string, brand: Brand, price: number | null, productId: string, taxClass: string | null, productData: ProductData, images?: Images): Product;
    getPrice(): number | null;
    getSalePrice(): number | null;
    getSaleStartDate(): Date | null;
    getSaleStartDateString(): string | null;
    getSaleEndDate(): Date | null;
    getSaleEndDateString(): string | null;
    getQuantity(): number;
    getAvailable(): number | null;
    getStatus(): string;
    setStatus(status: string): void;
    setPrice(price: number | null): void;
    setSalePrice(salePrice: number | null): void;
    setSaleStartDate(saleStartDate: Date | null): void;
    setSaleEndDate(saleEndDate: Date | null): void;
    setQuantity(quantity: number): void;
    setAvailable(available: number | null): void;
    all(): ProductAttributes;
}
export { Product };
