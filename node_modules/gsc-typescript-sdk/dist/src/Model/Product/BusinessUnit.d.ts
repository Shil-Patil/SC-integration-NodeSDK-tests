import { ProductStatus } from "../../Contract/ProductStatus";
import { VariationProductInterface } from "./Contract/VariationProductInterface";
declare class BusinessUnit implements VariationProductInterface {
    static readonly FEED_BUSINESS_UNIT = "BusinessUnit";
    static readonly FEED_OPERATOR_CODE = "OperatorCode";
    static readonly FEED_PRICE = "Price";
    static readonly FEED_SPECIAL_PRICE = "SpecialPrice";
    static readonly FEED_SPECIAL_FROM_DATE = "SpecialFromDate";
    static readonly FEED_SPECIAL_TO_DATE = "SpecialToDate";
    static readonly FEED_STOCK = "Stock";
    static readonly FEED_STATUS = "Status";
    static readonly FEED_IS_PUBLISHED = "IsPublished";
    protected businessUnit: string | null;
    protected operatorCode: string;
    protected price: number;
    protected specialPrice: number;
    protected specialFromDate: Date | null;
    protected specialToDate: Date | null;
    protected stock: number;
    protected status: string;
    protected isPublished: number | null;
    constructor(operatorCode: string, price: number, stock: number, status: ProductStatus, isPublished?: number, businessUnit?: string, specialPrice?: number, specialFromDate?: Date, specialToDate?: Date);
    getBusinessUnit(): string;
    getOperatorCode(): string;
    getPrice(): number;
    getSalePrice(): number;
    getSaleStartDate(): Date;
    getSaleStartDateString(): string;
    getSaleEndDate(): Date;
    getSaleEndDateString(): string;
    getStock(): number;
    getAvailable(): number;
    getStatus(): string;
    getIsPublished(): number;
    getAllAttributes(): JSON;
    setBusinessUnit(businessUnit: string): void;
    setOperatorCode(operatorCode: string): void;
    setPrice(price: number): void;
    setSalePrice(specialPrice: number): void;
    setSaleStartDate(specialFromDate: Date): void;
    setSaleEndDate(specialToDate: Date): void;
    setStock(stock: number): void;
    setStatus(status: ProductStatus): void;
    setIsPublished(isPublished: number): void;
}
export { BusinessUnit };
