"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = void 0;
var __1 = require("../../..");
var ProductAttribute_1 = require("../../Contract/ProductAttribute");
var Categories_1 = require("../Category/Categories");
var BaseProduct_1 = require("./BaseProduct");
var Images_1 = require("./Images");
var ProductData_1 = require("./ProductData");
var Product = /** @class */ (function (_super) {
    __extends(Product, _super);
    function Product() {
        var _this = _super.call(this) || this;
        _this.productData = new ProductData_1.ProductData();
        _this.images = new Images_1.Images();
        return _this;
    }
    Product.fromBasicData = function (sellerSku, name, variation, primaryCategory, description, brand, price, productId, taxClass, productData, images) {
        Product.validateArguments(sellerSku, name, description, productId);
        var product = new Product();
        product.setSellerSku(sellerSku);
        product.setName(name);
        product.setVariation(variation);
        product.setPrimaryCategory(primaryCategory);
        product.setDescription(description);
        product.setBrand(brand);
        product.setPrice(price);
        product.setProductId(productId);
        product.setTaxClass(taxClass);
        product.setProductData(productData);
        product.setStatus(__1.ProductStatus.ACTIVE);
        product.setQuantity(0);
        product.setAvailable(0);
        var categories = new Categories_1.Categories();
        product.setCategories(categories);
        if (images) {
            product.attachImages(images);
        }
        return product;
    };
    Product.prototype.getPrice = function () {
        return this.price;
    };
    Product.prototype.getSalePrice = function () {
        return this.salePrice;
    };
    Product.prototype.getSaleStartDate = function () {
        return this.saleStartDate;
    };
    Product.prototype.getSaleStartDateString = function () {
        if (this.saleStartDate) {
            return this.saleStartDate.toISOString();
        }
        return null;
    };
    Product.prototype.getSaleEndDate = function () {
        return this.saleEndDate;
    };
    Product.prototype.getSaleEndDateString = function () {
        if (this.saleEndDate) {
            return this.saleEndDate.toISOString();
        }
        return null;
    };
    Product.prototype.getQuantity = function () {
        return this.quantity;
    };
    Product.prototype.getAvailable = function () {
        return this.available;
    };
    Product.prototype.getStatus = function () {
        return this.status;
    };
    Product.prototype.setStatus = function (status) {
        if (Object.values(__1.ProductStatus).includes(status)) {
            this.status = status;
        }
    };
    Product.prototype.setPrice = function (price) {
        if (price > 0) {
            this.price = price;
        }
    };
    Product.prototype.setSalePrice = function (salePrice) {
        var price = parseFloat(this.price);
        var salePriceTemp = parseFloat(salePrice);
        if (salePriceTemp > 0 && salePrice < price) {
            this.salePrice = salePriceTemp;
        }
    };
    Product.prototype.setSaleStartDate = function (saleStartDate) {
        this.saleStartDate = saleStartDate;
    };
    Product.prototype.setSaleEndDate = function (saleEndDate) {
        this.saleEndDate = saleEndDate;
    };
    Product.prototype.setQuantity = function (quantity) {
        if (quantity >= 0) {
            this.quantity = quantity;
        }
    };
    Product.prototype.setAvailable = function (available) {
        if (available <= this.quantity && available >= 0) {
            this.available = available;
        }
    };
    Product.prototype.all = function () {
        var json = {};
        json[ProductAttribute_1.Attribute.FEED_SELLER_SKU] = this.sellerSku;
        json[ProductAttribute_1.Attribute.FEED_NEW_SELLER_SKU] = this.newSellerSku;
        json[ProductAttribute_1.Attribute.FEED_NAME] = this.name;
        json[ProductAttribute_1.Attribute.FEED_VARIATION] = this.variation;
        json[ProductAttribute_1.Attribute.FEED_STATUS] = this.status;
        json[ProductAttribute_1.Attribute.FEED_PRIMARY_CATEGORY] = this.primaryCategory;
        json[ProductAttribute_1.Attribute.FEED_CATEGORIES] = this.categories;
        json[ProductAttribute_1.Attribute.FEED_DESCRIPTION] = this.description;
        json[ProductAttribute_1.Attribute.FEED_BRAND] = this.brand;
        json[ProductAttribute_1.Attribute.FEED_PRICE] = this.price;
        json[ProductAttribute_1.Attribute.FEED_PRODUCT_ID] = this.productId;
        json[ProductAttribute_1.Attribute.FEED_TAX_CLASS] = this.taxClass;
        json[ProductAttribute_1.Attribute.FEED_PARENT_SKU] = this.parentSku;
        json[ProductAttribute_1.Attribute.FEED_QUANTITY] = this.quantity;
        json[ProductAttribute_1.Attribute.FEED_SALE_PRICE] = this.salePrice;
        json[ProductAttribute_1.Attribute.FEED_SALE_START_DATE] = this.getSaleStartDateString;
        json[ProductAttribute_1.Attribute.FEED_SALE_END_DATE] = this.getSaleEndDateString;
        return json;
    };
    return Product;
}(BaseProduct_1.BaseProduct));
exports.Product = Product;
//# sourceMappingURL=Product.js.map