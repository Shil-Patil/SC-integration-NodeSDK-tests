"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProduct = void 0;
var ProductAttribute_1 = require("../../Contract/ProductAttribute");
var EmptyArgumentException_1 = require("../../Exception/EmptyArgumentException");
var BaseProduct = /** @class */ (function () {
    function BaseProduct() {
    }
    BaseProduct.fromSku = function (sku) {
        var product = new BaseProduct();
        product.setSellerSku(sku);
        return product;
    };
    BaseProduct.prototype.getSellerSku = function () {
        return this.sellerSku;
    };
    BaseProduct.prototype.getNewSellerSku = function () {
        return this.newSellerSku;
    };
    BaseProduct.prototype.getShopSku = function () {
        return this.shopSku;
    };
    BaseProduct.prototype.getProductSin = function () {
        return this.productSin;
    };
    BaseProduct.prototype.getParentSku = function () {
        return this.parentSku;
    };
    BaseProduct.prototype.getName = function () {
        return this.name;
    };
    BaseProduct.prototype.getVariation = function () {
        return this.variation;
    };
    BaseProduct.prototype.getPrimaryCategory = function () {
        return this.primaryCategory;
    };
    BaseProduct.prototype.getCategories = function () {
        return this.categories;
    };
    BaseProduct.prototype.getDescription = function () {
        return this.description;
    };
    BaseProduct.prototype.getBrand = function () {
        return this.brand;
    };
    BaseProduct.prototype.getProductId = function () {
        return this.productId;
    };
    BaseProduct.prototype.getTaxClass = function () {
        return this.taxClass;
    };
    BaseProduct.prototype.getProductData = function () {
        return this.productData;
    };
    BaseProduct.prototype.getMainImage = function () {
        return this.mainImage;
    };
    BaseProduct.prototype.getImages = function () {
        return this.images;
    };
    BaseProduct.prototype.setSellerSku = function (sellerSku) {
        this.sellerSku = sellerSku;
    };
    BaseProduct.prototype.setNewSellerSku = function (newSellerSku) {
        this.newSellerSku = newSellerSku;
    };
    BaseProduct.prototype.setParentSku = function (parentSku) {
        this.parentSku = parentSku;
    };
    BaseProduct.prototype.setShopSku = function (sku) {
        this.shopSku = sku;
    };
    BaseProduct.prototype.setProductSin = function (productSin) {
        this.productSin = productSin;
    };
    BaseProduct.prototype.setName = function (name) {
        this.name = name;
    };
    BaseProduct.prototype.setVariation = function (variation) {
        this.variation = variation;
    };
    BaseProduct.prototype.setPrimaryCategory = function (primaryCategory) {
        this.primaryCategory = primaryCategory;
    };
    BaseProduct.prototype.setCategories = function (categories) {
        this.categories = categories;
    };
    BaseProduct.prototype.setDescription = function (description) {
        this.description = description;
    };
    BaseProduct.prototype.setBrand = function (brand) {
        this.brand = brand;
    };
    BaseProduct.prototype.setProductId = function (productId) {
        this.productId = productId;
    };
    BaseProduct.prototype.setTaxClass = function (taxClass) {
        this.taxClass = taxClass;
    };
    BaseProduct.prototype.setProductData = function (productData) {
        this.productData = productData;
    };
    BaseProduct.prototype.setMainImage = function (mainImage) {
        this.mainImage = mainImage;
    };
    BaseProduct.prototype.attachImages = function (images) {
        this.images = images;
    };
    BaseProduct.validateArguments = function (sellerSku, name, description, productId) {
        if (!sellerSku) {
            throw new EmptyArgumentException_1.EmptyArgumentException("SellerSku");
        }
        if (!name) {
            throw new EmptyArgumentException_1.EmptyArgumentException("Name");
        }
        if (!description) {
            throw new EmptyArgumentException_1.EmptyArgumentException('Description');
        }
        if (!productId) {
            throw new EmptyArgumentException_1.EmptyArgumentException('ProductId');
        }
    };
    BaseProduct.prototype.all = function () {
        var json = {};
        json[ProductAttribute_1.Attribute.FEED_SELLER_SKU] = this.sellerSku;
        json[ProductAttribute_1.Attribute.FEED_NEW_SELLER_SKU] = this.newSellerSku;
        json[ProductAttribute_1.Attribute.FEED_NAME] = this.name;
        json[ProductAttribute_1.Attribute.FEED_VARIATION] = this.variation;
        json[ProductAttribute_1.Attribute.FEED_PRIMARY_CATEGORY] = this.primaryCategory;
        json[ProductAttribute_1.Attribute.FEED_CATEGORIES] = this.categories;
        json[ProductAttribute_1.Attribute.FEED_DESCRIPTION] = this.description;
        json[ProductAttribute_1.Attribute.FEED_BRAND] = this.brand;
        json[ProductAttribute_1.Attribute.FEED_PRODUCT_ID] = this.productId;
        json[ProductAttribute_1.Attribute.FEED_TAX_CLASS] = this.taxClass;
        json[ProductAttribute_1.Attribute.FEED_PARENT_SKU] = this.parentSku;
        return json;
    };
    return BaseProduct;
}());
exports.BaseProduct = BaseProduct;
//# sourceMappingURL=BaseProduct.js.map