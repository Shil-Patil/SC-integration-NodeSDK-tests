declare class OrderItem {
    protected orderItemId: number;
    protected shopId: number;
    protected orderId: number;
    protected name: string;
    protected sku: string;
    protected variation: string;
    protected shopSku: string;
    protected shippingType: string;
    protected itemPrice: number;
    protected paidPrice: number;
    protected currency: string;
    protected walletCredits: number;
    protected taxAmount: number;
    protected codCollectableAmount: number;
    protected shippingAmount: number;
    protected shippingServiceCost: number;
    protected voucherAmount: number;
    protected voucherCode: string;
    protected status: string;
    protected isProcessable: boolean;
    protected shipmentProvider: string;
    protected isDigital: boolean;
    protected digitalDeliveryInfo: string;
    protected trackingCode: string;
    protected trackingCodePre: string;
    protected reason: string;
    protected reasonDetail: string;
    protected purchaseOrderId: number;
    protected purchaseOrderNumber: string;
    protected packageId: string;
    protected promisedShippingTime: Date;
    /**
     * @var mixed[]|null
     */
    protected extraAttributes: [];
    protected shippingProviderType: string;
    protected createdAt: Date;
    protected updatedAt: Date;
    protected returnStatus: string;
    protected salesType: string;
    static fromOrderItem(orderItemId: number, shopId: number, orderId: number, name: string, sku: string, variation: string, shopSku: string, shippingType: string, itemPrice: number, paidPrice: number, currency: string, walletCredits: number, taxAmount: number, shippingAmount: number, shippingServiceCost: number, voucherAmount: number, status: string, isProcessable: boolean, shipmentProvider: string, isDigital: boolean, shippingProviderType: string, trackingCodePre?: string, reason?: string, reasonDetail?: string, purchaseOrderId?: number, purchaseOrderNumber?: string, packageId?: string, promisedShippingTime?: Date, extraAttributes?: [], digitalDeliveryInfo?: string, codCollectableAmount?: number, trackingCode?: string, voucherCode?: string, createdAt?: Date, updatedAt?: Date, returnStatus?: string, salesType?: string): OrderItem;
    static fromStatus(orderItemId: number, purchaseOrderId: number, purchaseOrderNumber: string, packageId?: string): OrderItem;
    getOrderItemId(): number;
    getShopId(): number;
    getOrderId(): number;
    getName(): string;
    getSku(): string;
    getVariation(): string;
    getShopSku(): string;
    getShippingType(): string;
    getItemPrice(): number;
    getPaidPrice(): number;
    getCurrency(): string;
    getWalletCredits(): number;
    getTaxAmount(): number;
    getCodCollectableAmount(): number;
    getShippingAmount(): number;
    getShippingServiceCost(): number;
    getVoucherAmount(): number;
    getVoucherCode(): string;
    getStatus(): string;
    getIsProcessable(): boolean;
    getShipmentProvider(): string;
    getIsDigital(): boolean;
    getDigitalDeliveryInfo(): string;
    getTrackingCode(): string;
    getTrackingCodePre(): string;
    getReason(): string;
    getReasonDetail(): string;
    getPurchaseOrderId(): number;
    getPurchaseOrderNumber(): string;
    getPackageId(): string;
    getPromisedShippingTime(): Date;
    /**
     * @return mixed[]|null
     */
    getExtraAttributes(): [];
    getShippingProviderType(): string;
    getCreatedAt(): Date;
    getUpdatedAt(): Date;
    getReturnStatus(): string;
    getSalesType(): string;
}
export { OrderItem };
